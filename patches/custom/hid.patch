From 4201852b3a2d914c8f8f3d039d5c36f6c978237a Mon Sep 17 00:00:00 2001
From: Diab Neiroukh <officiallazerl0rd@gmail.com>
Date: Fri, 26 Jul 2019 16:34:24 +0200
Subject: [PATCH] usb: gadget: add HID support for keyboard and mouse

Taken from the Android Gadget driver in older kernels, and adjusted to
fit the current Linux HID driver.

Suggested-by: simonpunk <simonpunk2016@gmail.com>
Signed-off-by: Diab Neiroukh <officiallazerl0rd@gmail.com>
---
 drivers/usb/gadget/function/f_hid.c           | 154 +++++++++++++++++-
 drivers/usb/gadget/function/f_hid.h           |  16 ++
 .../gadget/function/f_hid_android_keyboard.c  |  44 +++++
 .../usb/gadget/function/f_hid_android_mouse.c |  39 +++++
 4 files changed, 251 insertions(+), 2 deletions(-)
 create mode 100644 drivers/usb/gadget/function/f_hid.h
 create mode 100644 drivers/usb/gadget/function/f_hid_android_keyboard.c
 create mode 100644 drivers/usb/gadget/function/f_hid_android_mouse.c

diff --git a/drivers/usb/gadget/function/f_hid.c b/drivers/usb/gadget/function/f_hid.c
index 8e83649f77ce1..393d36b6e265c 100644
--- a/drivers/usb/gadget/function/f_hid.c
+++ b/drivers/usb/gadget/function/f_hid.c
@@ -20,9 +20,13 @@
 #include <linux/wait.h>
 #include <linux/sched.h>
 #include <linux/usb/g_hid.h>
+#include <linux/delay.h>
 
+#include "f_hid.h"
 #include "u_f.h"
 #include "u_hid.h"
+#include "f_hid_android_keyboard.c"
+#include "f_hid_android_mouse.c"
 
 #define HIDG_MINORS	4
 
@@ -68,6 +72,45 @@ struct f_hidg {
 	struct usb_ep			*out_ep;
 };
 
+/*
+ * Hacky device list to fix f_hidg_write being called after device destroyed.
+ * It covers only most common race conditions, there will be rare crashes anyway.
+ */
+enum { HACKY_DEVICE_LIST_SIZE = 4 };
+static struct f_hidg *hacky_device_list[HACKY_DEVICE_LIST_SIZE];
+static void hacky_device_list_add(struct f_hidg *hidg)
+{
+	int i;
+	for (i = 0; i < HACKY_DEVICE_LIST_SIZE; i++) {
+		if (!hacky_device_list[i]) {
+			hacky_device_list[i] = hidg;
+			return;
+		}
+	}
+	pr_err("%s: too many devices, not adding device %p\n", __func__, hidg);
+}
+static void hacky_device_list_remove(struct f_hidg *hidg)
+{
+	int i;
+	for (i = 0; i < HACKY_DEVICE_LIST_SIZE; i++) {
+		if (hacky_device_list[i] == hidg) {
+			hacky_device_list[i] = NULL;
+			return;
+		}
+	}
+	pr_err("%s: cannot find device %p\n", __func__, hidg);
+}
+static int hacky_device_list_check(struct f_hidg *hidg)
+{
+	int i;
+	for (i = 0; i < HACKY_DEVICE_LIST_SIZE; i++) {
+		if (hacky_device_list[i] == hidg) {
+			return 0;
+		}
+	}
+	return 1;
+}
+
 static inline struct f_hidg *func_to_hidg(struct usb_function *f)
 {
 	return container_of(f, struct f_hidg, func);
@@ -204,6 +247,11 @@ static ssize_t f_hidg_read(struct file *file, char __user *buffer,
 	if (!access_ok(VERIFY_WRITE, buffer, count))
 		return -EFAULT;
 
+	if (hacky_device_list_check(hidg)) {
+		pr_err("%s: trying to read from device %p that was destroyed\n", __func__, hidg);
+		return -EIO;
+	}
+
 	spin_lock_irqsave(&hidg->read_spinlock, flags);
 
 #define READ_COND (!list_empty(&hidg->completed_out_req))
@@ -291,6 +339,11 @@ static ssize_t f_hidg_write(struct file *file, const char __user *buffer,
 	if (!access_ok(VERIFY_READ, buffer, count))
 		return -EFAULT;
 
+	if (hacky_device_list_check(hidg)) {
+		pr_err("%s: trying to write to device %p that was destroyed\n", __func__, hidg);
+		return -EIO;
+	}
+
 	spin_lock_irqsave(&hidg->write_spinlock, flags);
 
 #define WRITE_COND (!hidg->write_pending)
@@ -305,6 +358,11 @@ static ssize_t f_hidg_write(struct file *file, const char __user *buffer,
 				hidg->write_queue, WRITE_COND))
 			return -ERESTARTSYS;
 
+		if (hacky_device_list_check(hidg)) {
+			pr_err("%s: trying to write to device %p that was destroyed\n", __func__, hidg);
+			return -EIO;
+		}
+
 		spin_lock_irqsave(&hidg->write_spinlock, flags);
 	}
 
@@ -367,7 +425,16 @@ static unsigned int f_hidg_poll(struct file *file, poll_table *wait)
 	struct f_hidg	*hidg  = file->private_data;
 	unsigned int	ret = 0;
 
+	if (hacky_device_list_check(hidg)) {
+		pr_err("%s: trying to poll device %p that was destroyed\n", __func__, hidg);
+		return -EIO;
+	}
 	poll_wait(file, &hidg->read_queue, wait);
+
+	if (hacky_device_list_check(hidg)) {
+		pr_err("%s: trying to poll device %p that was destroyed\n", __func__, hidg);
+		return -EIO;
+	}
 	poll_wait(file, &hidg->write_queue, wait);
 
 	if (WRITE_COND)
@@ -463,9 +530,12 @@ static int hidg_setup(struct usb_function *f,
 		  | HID_REQ_GET_REPORT):
 		VDBG(cdev, "get_report\n");
 
-		/* send an empty report */
+		/* send an empty report if boot protocol */
 		length = min_t(unsigned, length, hidg->report_length);
-		memset(req->buf, 0x0, length);
+		if (hidg->bInterfaceSubClass == USB_INTERFACE_SUBCLASS_BOOT)
+			memset(req->buf, 0x0, length);
+		else
+			memset(req->buf, 0x1, length);
 
 		goto respond;
 		break;
@@ -686,6 +756,8 @@ static int hidg_bind(struct usb_configuration *c, struct usb_function *f)
 	int			status;
 	dev_t			dev;
 
+	pr_info("%s: creating device %p\n", __func__, hidg);
+
 	/* maybe allocate device-global string IDs, and patch descriptors */
 	us = usb_gstrings_attach(c->cdev, ct_func_strings,
 				 ARRAY_SIZE(ct_func_string_defs));
@@ -753,6 +825,8 @@ static int hidg_bind(struct usb_configuration *c, struct usb_function *f)
 
 	device = device_create(hidg_class, NULL, dev, NULL,
 			       "%s%d", "hidg", hidg->minor);
+	hacky_device_list_add(hidg);
+
 	if (IS_ERR(device)) {
 		status = PTR_ERR(device);
 		goto del;
@@ -974,6 +1048,23 @@ static struct usb_function_instance *hidg_alloc_inst(void)
 		if (idr_is_empty(&hidg_ida.idr))
 			ghid_cleanup();
 		goto unlock;
+	} else {
+		switch (opts->minor) {
+		case 0:
+			opts->subclass = ghid_device_android_keyboard.subclass;
+			opts->protocol = ghid_device_android_keyboard.protocol;
+			opts->report_length = ghid_device_android_keyboard.report_length;
+			opts->report_desc_length = ghid_device_android_keyboard.report_desc_length;
+			opts->report_desc = ghid_device_android_keyboard.report_desc;
+			break;
+		case 1:
+			opts->subclass = ghid_device_android_mouse.subclass;
+			opts->protocol = ghid_device_android_mouse.protocol;
+			opts->report_length = ghid_device_android_mouse.report_length;
+			opts->report_desc_length = ghid_device_android_mouse.report_desc_length;
+			opts->report_desc = ghid_device_android_mouse.report_desc;
+			break;
+		}
 	}
 	config_group_init_type_name(&opts->func_inst.group, "", &hid_func_type);
 
@@ -999,6 +1088,13 @@ static void hidg_free(struct usb_function *f)
 static void hidg_unbind(struct usb_configuration *c, struct usb_function *f)
 {
 	struct f_hidg *hidg = func_to_hidg(f);
+	unsigned long flags;
+
+	pr_info("%s: destroying device %p\n", __func__, hidg);
+	/* This does not cover all race conditions, only most common one */
+	spin_lock_irqsave(&hidg->write_spinlock, flags);
+	hacky_device_list_remove(hidg);
+	spin_unlock_irqrestore(&hidg->write_spinlock, flags);
 
 	device_destroy(hidg_class, MKDEV(major, hidg->minor));
 	cdev_del(&hidg->cdev);
@@ -1057,6 +1153,60 @@ DECLARE_USB_FUNCTION_INIT(hid, hidg_alloc_inst, hidg_alloc);
 MODULE_LICENSE("GPL");
 MODULE_AUTHOR("Fabien Chouteau");
 
+int hidg_bind_config(struct usb_configuration *c,
+			    struct hidg_func_descriptor *fdesc, int index)
+{
+	struct f_hidg *hidg;
+	int status;
+
+	if (index >= minors)
+		return -ENOENT;
+
+	/* Maybe allocate device-global string IDs, and patch descriptors */
+	if (ct_func_string_defs[CT_FUNC_HID_IDX].id == 0) {
+		status = usb_string_id(c->cdev);
+		if (status < 0)
+			return status;
+		ct_func_string_defs[CT_FUNC_HID_IDX].id = status;
+		hidg_interface_desc.iInterface = status;
+	}
+
+	/* Allocate and initialize one new instance */
+	hidg = kzalloc(sizeof *hidg, GFP_KERNEL);
+	if (!hidg)
+		return -ENOMEM;
+
+	hidg->minor = index;
+	hidg->bInterfaceSubClass = fdesc->subclass;
+	hidg->bInterfaceProtocol = fdesc->protocol;
+	hidg->report_length = fdesc->report_length;
+	hidg->report_desc_length = fdesc->report_desc_length;
+	hidg->report_desc = kmemdup(fdesc->report_desc,
+				    fdesc->report_desc_length,
+				    GFP_KERNEL);
+	if (!hidg->report_desc) {
+		kfree(hidg);
+		return -ENOMEM;
+	}
+
+	hidg->func.name    = "hid";
+	hidg->func.strings = ct_func_strings;
+	hidg->func.bind    = hidg_bind;
+	hidg->func.unbind  = hidg_unbind;
+	hidg->func.set_alt = hidg_set_alt;
+	hidg->func.disable = hidg_disable;
+	hidg->func.setup   = hidg_setup;
+
+	/* TODO make configurable at some point */
+	hidg->qlen	   = 4;
+
+	status = usb_add_function(c, &hidg->func);
+	if (status)
+		kfree(hidg);
+
+	return status;
+}
+
 int ghid_setup(struct usb_gadget *g, int count)
 {
 	int status;
diff --git a/drivers/usb/gadget/function/f_hid.h b/drivers/usb/gadget/function/f_hid.h
new file mode 100644
index 0000000000000..ad3527a6d81ba
--- /dev/null
+++ b/drivers/usb/gadget/function/f_hid.h
@@ -0,0 +1,16 @@
+#ifndef _GADGET_F_HID_H
+#define _GADGET_F_HID_H
+
+#include <linux/hid.h>
+#include <linux/usb/composite.h>
+#include <linux/usb/gadget.h>
+#include <linux/usb/g_hid.h>
+
+int hidg_bind_config(struct usb_configuration *c,
+			    struct hidg_func_descriptor *fdesc, int index);
+
+int ghid_setup(struct usb_gadget *g, int count);
+
+void ghid_cleanup(void);
+
+#endif
diff --git a/drivers/usb/gadget/function/f_hid_android_keyboard.c b/drivers/usb/gadget/function/f_hid_android_keyboard.c
new file mode 100644
index 0000000000000..a3a73e52e8eac
--- /dev/null
+++ b/drivers/usb/gadget/function/f_hid_android_keyboard.c
@@ -0,0 +1,44 @@
+#include <linux/platform_device.h>
+#include <linux/usb/g_hid.h>
+
+/* HID descriptor for a keyboard */
+static struct hidg_func_descriptor ghid_device_android_keyboard = {
+	.subclass		= 1, /* Boot Interface Subclass */
+	.protocol		= 1, /* Keyboard */
+	.report_length		= 8,
+	.report_desc_length	= 63,
+	.report_desc		= {
+		0x05, 0x01,	/*  USAGE_PAGE (Generic Desktop)		*/
+		0x09, 0x06,	/*  USAGE (Keyboard)				*/
+		0xa1, 0x01,	/*  COLLECTION (Application)			*/
+		0x05, 0x07,	/*  USAGE_PAGE (Keyboard)			*/
+		0x19, 0xe0,	/*  USAGE_MINIMUM (Keyboard LeftControl)	*/
+		0x29, 0xe7,	/*  USAGE_MAXIMUM (Keyboard Right GUI)		*/
+		0x15, 0x00,	/*  LOGICAL_MINIMUM (0)				*/
+		0x25, 0x01,	/*  LOGICAL_MAXIMUM (1)				*/
+		0x75, 0x01,	/*  REPORT_SIZE (1)				*/
+		0x95, 0x08,	/*  REPORT_COUNT (8)				*/
+		0x81, 0x02,	/*  INPUT (Data,Var,Abs)			*/
+		0x95, 0x01,	/*  REPORT_COUNT (1)				*/
+		0x75, 0x08,	/*  REPORT_SIZE (8)				*/
+		0x81, 0x03,	/*  INPUT (Cnst,Var,Abs)			*/
+		0x95, 0x05,	/*  REPORT_COUNT (5)				*/
+		0x75, 0x01,	/*  REPORT_SIZE (1)				*/
+		0x05, 0x08,	/*  USAGE_PAGE (LEDs)				*/
+		0x19, 0x01,	/*  USAGE_MINIMUM (Num Lock)			*/
+		0x29, 0x05,	/*  USAGE_MAXIMUM (Kana)			*/
+		0x91, 0x02,	/*  OUTPUT (Data,Var,Abs)			*/
+		0x95, 0x01,	/*  REPORT_COUNT (1)				*/
+		0x75, 0x03,	/*  REPORT_SIZE (3)				*/
+		0x91, 0x03,	/*  OUTPUT (Cnst,Var,Abs)			*/
+		0x95, 0x06,	/*  REPORT_COUNT (6)				*/
+		0x75, 0x08,	/*  REPORT_SIZE (8)				*/
+		0x15, 0x00,	/*  LOGICAL_MINIMUM (0)				*/
+		0x25, 0x65,	/*  LOGICAL_MAXIMUM (101)			*/
+		0x05, 0x07,	/*  USAGE_PAGE (Keyboard)			*/
+		0x19, 0x00,	/*  USAGE_MINIMUM (Reserved)			*/
+		0x29, 0x65,	/*  USAGE_MAXIMUM (Keyboard Application)	*/
+		0x81, 0x00,	/*  INPUT (Data,Ary,Abs)			*/
+		0xc0		/*  END_COLLECTION				*/
+	}
+};
diff --git a/drivers/usb/gadget/function/f_hid_android_mouse.c b/drivers/usb/gadget/function/f_hid_android_mouse.c
new file mode 100644
index 0000000000000..877abb134a093
--- /dev/null
+++ b/drivers/usb/gadget/function/f_hid_android_mouse.c
@@ -0,0 +1,39 @@
+#include <linux/platform_device.h>
+#include <linux/usb/g_hid.h>
+
+/* HID descriptor for a mouse */
+static struct hidg_func_descriptor ghid_device_android_mouse = {
+	.subclass		= 1, /* Boot Interface Subclass */
+	.protocol		= 2, /* Mouse */
+	.report_length		= 4,
+	.report_desc_length	= 52,
+	.report_desc		= {
+		0x05, 0x01,	/*  USAGE_PAGE (Generic Desktop Controls)	*/
+		0x09, 0x02,	/*  USAGE (Mouse)				*/
+		0xa1, 0x01,	/*  COLLECTION (Application)			*/
+		0x09, 0x01,	/*  USAGE (pointer)				*/
+		0xa1, 0x00,	/*  COLLECTION (Physical)			*/
+		0x05, 0x09,	/*  USAGE_PAGE (Button)				*/
+		0x19, 0x01,	/*  USAGE_MINIMUM (1)				*/
+		0x29, 0x05,	/*  USAGE_MAXIMUM (5)				*/
+		0x15, 0x00,	/*  LOGICAL_MINIMUM (1)				*/
+		0x25, 0x01,	/*  LOGICAL_MAXIMUM (1)				*/
+		0x95, 0x05,	/*  REPORT_COUNT (5)				*/
+		0x75, 0x01,	/*  REPORT_SIZE (1)				*/
+		0x81, 0x02,	/*  INPUT (Data,Var,Abs,Bit)			*/
+		0x95, 0x01,	/*  REPORT_COUNT (1)				*/
+		0x75, 0x03,	/*  REPORT_SIZE (3)				*/
+		0x81, 0x01,	/*  INPUT (Const,Ary,Abs,Bit)			*/
+		0x05, 0x01,	/*  USAGE_PAGE (Generic Desktop Controls)	*/
+		0x09, 0x30,	/*  USAGE (x)					*/
+		0x09, 0x31,	/*  USAGE (y)					*/
+		0x09, 0x38,	/*  USAGE (Wheel)				*/
+		0x15, 0x81,	/*  LOGICAL_MINIMUM (-127)			*/
+		0x25, 0x7F,	/*  LOGICAL_MAXIMUM (127)			*/
+		0x75, 0x08,	/*  REPORT_SIZE (8)				*/
+		0x95, 0x03,	/*  REPORT_COUNT (3)				*/
+		0x81, 0x06,	/*  INPUT (Data,Var,Rel,Bit)			*/
+		0xc0,		/*  END_COLLECTION				*/
+		0xc0		/*  END_COLLECTION				*/
+	}
+};

